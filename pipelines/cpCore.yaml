description: |
  Standard plots to assess validity of calibration products.
tasks:
  analyzeBiasCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpBiasCore
      connections.data: verifyBiasResults

      atools.biasReadNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.biasReadNoisePerAmp.produce.plot.addHistogram: true
      atools.biasReadNoisePerAmp.quantityKey: BIAS_READ_NOISE_ADU
      atools.biasReadNoisePerAmp.unit: ADU

      atools.biasMeanPerAmp: CalibStatisticFocalPlanePlot
      atools.biasMeanPerAmp.produce.plot.addHistogram: true
      atools.biasMeanPerAmp.quantityKey: BIAS_MEAN
      atools.biasMeanPerAmp.unit: electron

      atools.biasNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.biasNoisePerAmp.produce.plot.addHistogram: true
      atools.biasNoisePerAmp.quantityKey: BIAS_NOISE
      atools.biasNoisePerAmp.unit: electron

      atools.biasCrNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.biasCrNoisePerAmp.produce.plot.addHistogram: true
      atools.biasCrNoisePerAmp.quantityKey: BIAS_CR_NOISE
      atools.biasCrNoisePerAmp.unit: electron

      atools.biasCornerMeanPerAmp: CalibStatisticFocalPlanePlot
      atools.biasCornerMeanPerAmp.produce.plot.addHistogram: true
      atools.biasCornerMeanPerAmp.quantityKey: BIAS_AMP_CORNER
      atools.biasCornerMeanPerAmp.unit: electron

      python: |
        from lsst.analysis.tools.atools import *

  analyzeBiasDetCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpBiasDetCore
      connections.data: verifyBiasResults

      atools.biasMeanByDate: CalibAmpScatterTool
      atools.biasMeanByDate.prep.panelKey: amplifier
      atools.biasMeanByDate.prep.dataKey: mjd
      atools.biasMeanByDate.prep.quantityKey: BIAS_MEAN
      atools.biasMeanByDate.produce.plot.xAxisLabel: "MJD"
      atools.biasMeanByDate.produce.plot.yAxisLabel: "Residual bias mean (e-)"

      atools.biasStdByDate: CalibAmpScatterTool
      atools.biasStdByDate.prep.panelKey: amplifier
      atools.biasStdByDate.prep.dataKey: mjd
      atools.biasStdByDate.prep.quantityKey: BIAS_NOISE
      atools.biasStdByDate.produce.plot.xAxisLabel: "MJD"
      atools.biasStdByDate.produce.plot.yAxisLabel: "Residual bias stdev (e-)"

      atools.biasROCornerByDate: CalibAmpScatterTool
      atools.biasROCornerByDate.prep.panelKey: amplifier
      atools.biasROCornerByDate.prep.dataKey: mjd
      atools.biasROCornerByDate.prep.quantityKey: BIAS_AMP_CORNER
      atools.biasROCornerByDate.produce.plot.xAxisLabel: "MJD"
      atools.biasROCornerByDate.produce.plot.yAxisLabel: "Residual bias mean at RO corner (e-)"

      atools.biasTestsByDate: CalibAmpScatterTool
      atools.biasTestsByDate.prep.panelKey: amplifier
      atools.biasTestsByDate.prep.dataKey: mjd
      atools.biasTestsByDate.prep.quantityKey: BIAS_VERIFY_MEAN
      atools.biasTestsByDate.produce.plot.xAxisLabel: "MJD"
      atools.biasTestsByDate.produce.plot.yAxisLabel: "Bias Test Passing"

      python: |
        from lsst.analysis.tools.atools import *

  analyzeDarkCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpDarkCore
      connections.data: verifyDarkResults
      atools.darkReadNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.darkReadNoisePerAmp.produce.plot.addHistogram: true
      atools.darkReadNoisePerAmp.quantityKey: DARK_READ_NOISE_ADU
      atools.darkReadNoisePerAmp.unit: ADU

      atools.darkMeanPerAmp: CalibStatisticFocalPlanePlot
      atools.darkMeanPerAmp.produce.plot.addHistogram: true
      atools.darkMeanPerAmp.quantityKey: DARK_MEAN
      atools.darkMeanPerAmp.unit: electron

      atools.darkNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.darkNoisePerAmp.produce.plot.addHistogram: true
      atools.darkNoisePerAmp.quantityKey: DARK_NOISE
      atools.darkNoisePerAmp.unit: electron

      atools.darkCrNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.darkCrNoisePerAmp.produce.plot.addHistogram: true
      atools.darkCrNoisePerAmp.quantityKey: DARK_CR_NOISE
      atools.darkCrNoisePerAmp.unit: electron

      atools.darkMedianPerAmp: CalibStatisticFocalPlanePlot
      atools.darkMedianPerAmp.produce.plot.addHistogram: true
      atools.darkMedianPerAmp.quantityKey: DARK_DARK_DIST_50.0_PCT
      atools.darkMedianPerAmp.unit: electron

      atools.dark95pPerAmp: CalibStatisticFocalPlanePlot
      atools.dark95pPerAmp.produce.plot.addHistogram: true
      atools.dark95pPerAmp.quantityKey: DARK_DARK_DIST_95.0_PCT
      atools.dark95pPerAmp.unit: electron
      python: |
        from lsst.analysis.tools.atools import *

  analyzeDarkDetCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpDarkDetCore
      connections.data: verifyDarkResults

      atools.darkMeanByDate: CalibAmpScatterTool
      atools.darkMeanByDate.prep.panelKey: amplifier
      atools.darkMeanByDate.prep.dataKey: mjd
      atools.darkMeanByDate.prep.quantityKey: DARK_MEAN
      atools.darkMeanByDate.produce.plot.xAxisLabel: "MJD"
      atools.darkMeanByDate.produce.plot.yAxisLabel: "Residual dark mean (e-)"

      atools.darkStdByDate: CalibAmpScatterTool
      atools.darkStdByDate.prep.panelKey: amplifier
      atools.darkStdByDate.prep.dataKey: mjd
      atools.darkStdByDate.prep.quantityKey: DARK_NOISE
      atools.darkStdByDate.produce.plot.xAxisLabel: "MJD"
      atools.darkStdByDate.produce.plot.yAxisLabel: "Residual dark std (e-)"

      atools.darkTestsByDate: CalibAmpScatterTool
      atools.darkTestsByDate.prep.panelKey: amplifier
      atools.darkTestsByDate.prep.dataKey: mjd
      atools.darkTestsByDate.prep.quantityKey: DARK_VERIFY_MEAN
      atools.darkTestsByDate.produce.plot.xAxisLabel: "MJD"
      atools.darkTestsByDate.produce.plot.yAxisLabel: "Dark Test Passing"

      python: |
        from lsst.analysis.tools.atools import *

  analyzeFlatDetCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTaskByFilter
    config:
      connections.outputName: cpFlatDetCore
      connections.data: verifyFlatResults

      atools.flatTestsByDate: CalibAmpScatterTool
      atools.flatTestsByDate.prep.panelKey: amplifier
      atools.flatTestsByDate.prep.dataKey: mjd
      atools.flatTestsByDate.prep.quantityKey: FLAT_VERIFY_NOISE
      # TODO: DM-43878
      # FLAT_DET_VERIFY_SCATTER
      atools.flatTestsByDate.produce.plot.xAxisLabel: "MJD"
      atools.flatTestsByDate.produce.plot.yAxisLabel: "Test Pass Results"

      python: |
        from lsst.analysis.tools.atools import *

  analyzePtcCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpPtcCore
      connections.data: verifyPtcResults

      atools.ptcGainPerAmp: CalibStatisticFocalPlanePlot
      atools.ptcGainPerAmp.produce.plot.addHistogram: true
      atools.ptcGainPerAmp.produce.plot.zAxisLabel: "PTC Gain (e-/ADU)"
      atools.ptcGainPerAmp.quantityKey: PTC_PTC_GAIN
      atools.ptcGainPerAmp.unit: electron

      atools.ptcNoisePerAmp: CalibStatisticFocalPlanePlot
      atools.ptcNoisePerAmp.produce.plot.addHistogram: true
      atools.ptcNoisePerAmp.produce.plot.zAxisLabel: "PTC Read Noise (ADU^2)"
      atools.ptcNoisePerAmp.quantityKey: PTC_PTC_NOISE
      atools.ptcNoisePerAmp.unit: ADU

      atools.ptcA00PerAmp: CalibStatisticFocalPlanePlot
      atools.ptcA00PerAmp.produce.plot.addHistogram: true
      atools.ptcA00PerAmp.produce.plot.zAxisLabel: "PTC BFE A00 (1/e-)"
      atools.ptcA00PerAmp.quantityKey: PTC_PTC_BFE_A00
      atools.ptcA00PerAmp.unit: "---"

      atools.ptcTurnoffPerAmp: CalibStatisticFocalPlanePlot
      atools.ptcTurnoffPerAmp.produce.plot.addHistogram: true
      atools.ptcTurnoffPerAmp.produce.plot.zAxisLabel: "PTC Turnoff (ADU)"
      atools.ptcTurnoffPerAmp.quantityKey: PTC_PTC_TURNOFF
      atools.ptcTurnoffPerAmp.unit: ADU

      atools.ptcMaxPerAmp: CalibStatisticFocalPlanePlot
      atools.ptcMaxPerAmp.produce.plot.addHistogram: true
      atools.ptcMaxPerAmp.produce.plot.zAxisLabel: "PTC Max Raw Mean Flux (ADU)"
      atools.ptcMaxPerAmp.quantityKey: PTC_PTC_MAX_RAW_MEANS
      atools.ptcMaxPerAmp.unit: ADU

      atools.ptcRowMeanVarianceSlopePerAmp: CalibStatisticFocalPlanePlot
      atools.ptcRowMeanVarianceSlopePerAmp.produce.plot.addHistogram: true
      atools.ptcRowMeanVarianceSlopePerAmp.produce.plot.zAxisLabel: "PTC Row-Mean-Variance Slope (e-)"
      atools.ptcRowMeanVarianceSlopePerAmp.quantityKey: PTC_PTC_ROW_MEAN_VARIANCE_SLOPE
      atools.ptcRowMeanVarianceSlopePerAmp.unit: electron

      python: |
        from lsst.analysis.tools.atools import *

  analyzePtcDetCore:
    class: lsst.analysis.tools.tasks.VerifyCalibDetectorTask
    config:
      connections.outputName: cpPtcDetCore
      connections.data: verifyPtcDetResults

      atools.ptcPlot: CalibAmpScatterTool
      atools.ptcPlot.prep.panelKey: amplifier
      atools.ptcPlot.prep.dataKey: PTC_PTC_FINAL_MEANS
      atools.ptcPlot.prep.quantityKey: PTC_PTC_FINAL_VARIANCE
      atools.ptcPlot.produce.plot.xAxisLabel: "Exposure Pair Flux (ADU)"
      atools.ptcPlot.produce.plot.yAxisLabel: "Exposure Pair Variance (ADU^2)"
      atools.ptcPlot.produce.plot.suptitle:
        t: "PTC (Final)"

      atools.rawPtcPlot: CalibAmpScatterTool
      atools.rawPtcPlot.prep.panelKey: amplifier
      atools.rawPtcPlot.prep.dataKey: PTC_PTC_RAW_MEANS
      atools.rawPtcPlot.prep.quantityKey: PTC_PTC_RAW_VARIANCE
      atools.rawPtcPlot.produce.plot.xAxisLabel: "Exposure Pair Flux (ADU)"
      atools.rawPtcPlot.produce.plot.yAxisLabel: "Exposure Pair Variance (ADU^2)"
      atools.rawPtcPlot.produce.plot.suptitle:
        t: "PTC (Raw)"
      python: |
        from lsst.analysis.tools.atools import *

  analyzeDefectCore:
    class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
    config:
      connections.outputName: cpDefectCore
      connections.data: verifyDefectsResults

      atools.defectsPixels: CalibStatisticFocalPlanePlot
      atools.defectsPixels.produce.plot.addHistogram: false
      # here set name of column from the verify table
      atools.defectsPixels.quantityKey: DEFECTS_DEFECT_PIXELS
      atools.defectsPixels.unit: "pix"

      atools.defectsPixelsFrac: CalibStatisticFocalPlanePlot
      atools.defectsPixelsFrac.produce.plot.addHistogram: false
      atools.defectsPixelsFrac.quantityKey: DEFECTS_FRAC
      atools.defectsPixelsFrac.unit: "pix"

      atools.defectsPixelsFracNoEdge: CalibStatisticFocalPlanePlot
      atools.defectsPixelsFracNoEdge.produce.plot.addHistogram: false
      atools.defectsPixelsFracNoEdge.quantityKey: DEFECTS_FRAC_NOEDGE
      atools.defectsPixelsFracNoEdge.unit: "pix"

      atools.defectsPixelsRequirement: CalibStatisticFocalPlanePlot
      atools.defectsPixelsRequirement.produce.plot.addHistogram: false
      atools.defectsPixelsRequirement.produce.plot.plotMin: 0
      atools.defectsPixelsRequirement.produce.plot.plotMax: 1
      atools.defectsPixelsRequirement.quantityKey: DEFECTS_REQUIREMENT
      atools.defectsPixelsRequirement.unit: "---"

      # TODO: DM-43880 Sort out defects
      # atools.defectsHotPixels: CalibStatisticFocalPlanePlot
      # atools.defectsHotPixels.produce.plot.addHistogram: true
      # atools.defectsHotPixels.produce.plot.zAxisLabel: "Number of Hot Pixels"
      # atools.defectsHotPixels.quantityKey: DEFECTS_DEFECTS_DIST_N_HOT
      # atools.defectsHotPixels.unit: "---"

      # atools.defectsColdPixels: CalibStatisticFocalPlanePlot
      # atools.defectsColdPixels.produce.plot.addHistogram: true
      # atools.defectsColdPixels.produce.plot.zAxisLabel: "Number of Cold Pixels"
      # atools.defectsColdPixels.quantityKey: DEFECTS_DEFECTS_DIST_N_COLD
      # atools.defectsColdPixels.unit: "---"

      # atools.defectsBadColumns: CalibStatisticFocalPlanePlot
      # atools.defectsBadColumns.produce.plot.addHistogram: true
      # atools.defectsBadColumns.produce.plot.zAxisLabel: "Number of Hot Pixels"
      # atools.defectsBadColumns.quantityKey: DEFECTS_DEFECTS_DIST_N_BAD_COLUMNS
      # atools.defectsBadColumns.unit: "---"

      python: |
        from lsst.analysis.tools.atools import *

  # analyzeLinearityCore:
  #   class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
  #   # TODO: DM-43881 Sort out linearity
  #   # * linearity curve per amp
  #   # * linearity residual per amp

  # analyzeCrosstalkCore:
  #   class: lsst.analysis.tools.tasks.VerifyCalibAnalysisTask
  #   # TODO: DM-43882 Sort out crosstalk

subsets:
  biasMetricsCore:
    subset:
      - analyzeBiasCore
      - analyzeBiasDetCore
  darkMetricsCore:
    subset:
      - analyzeDarkCore
      - analyzeDarkDetCore
  flatMetricsCore:
    subset:
      - analyzeFlatDetCore
  defectMetricsCore:
    subset:
      - analyzeDefectCore
  ptcMetricsCore:
    subset:
      - analyzePtcCore
      - analyzePtcDetCore
#   linearityMetrics:
#     subset:
#       - analyzeLinearityCore
#   crosstalkMetrics:
#     subset:
#       - analyzeCrosstalkCore
#       - analyzeCrosstalkCoeffs
